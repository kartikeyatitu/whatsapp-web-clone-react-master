{"version":3,"sources":["generateFakeData.js","components/Avatar.js","components/ContactBox.js","components/Message.js","components/MessagesBox.js","components/ChatInputBox.js","components/Search.js","components/Welcome.js","App.js","serviceWorker.js","index.js","assets/tag_faces.svg","assets/mic.svg","assets/send.svg","assets/intro-whatsapp.jpg","assets/done_all.svg"],"names":["faker","require","User","this","id","random","uuid","name","findName","avatar","internet","Message","isMainUser","msg","date","lorem","words","helpers","randomize","Array","keys","recent","mainUser","contactsMessages","map","contact","messages","_","i","filter","m","Avatar","user","showName","className","src","alt","ContactBox","text","length","setContactSelected","maxTs","Math","max","getTime","lastMsg","find","onClick","toLocaleDateString","doubleCheck","substring","message","toLocaleString","MessagesBox","endDiv","useRef","useEffect","current","scrollIntoView","sort","a","b","key","style","float","clear","ref","ChatInputBox","setMessage","pushMessage","emojiIcon","type","placeholder","value","onChange","e","target","onKeyDown","sendIcon","micIcon","Search","search","setSearch","Welcome","introImg","App","useState","data","setData","contactSelected","currentMessages","setCurrentMessages","filteredContacts","setFilterContacts","currContact","d","result","toLowerCase","includes","filterContacts","index","findIndex","newData","Object","assign","Date","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","module","exports"],"mappings":"gOAAMA,EAAQC,EAAQ,IAEhBC,EACF,aAAe,oBACXC,KAAKC,GAAKJ,EAAMK,OAAOC,OACvBH,KAAKI,KAAOP,EAAMO,KAAKC,WACvBL,KAAKM,OAAST,EAAMU,SAASD,UAGxBE,EACT,WAAYC,EAAYC,EAAKC,GAAO,oBAChCX,KAAKC,GAAKJ,EAAMK,OAAOC,OACvBH,KAAKU,IAAMA,GAAOb,EAAMe,MAAMC,MAAMhB,EAAMiB,QAAQC,UAAd,YAA4BC,MAAM,IAAIC,UAC1EjB,KAAKS,WAAaA,EAClBT,KAAKW,KAAOA,GAAQd,EAAMc,KAAKO,UAI1BC,EAAW,IAAIpB,EAIfqB,EAFW,YAAIJ,MAAM,IAAIC,QAAQI,KAAI,kBAAM,IAAItB,KAEnBsB,KAAI,SAACC,GAC1C,MAAO,CACHA,UACAC,SAAU,YAAIP,MAAM,IAAIC,QACnBI,KAAI,SAACG,EAAGC,GACL,OAA2B,IAAIjB,GAAvBiB,EAAI,GAAK,IAAM,MAE1BC,QAAO,SAACC,GAAD,OAAOA,EAAEjB,WC3Bd,SAASkB,EAAT,GAAqC,IAAnBC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,SACnC,OACI,yBAAKC,UAAU,oBACX,yBAAKA,UAAU,SAASC,IAAKH,EAAKvB,OAAQ2B,IAAI,KAC7CH,GAAY,wBAAIC,UAAU,gBAAgBF,EAAKzB,O,oBCF7C,SAAS8B,EAAT,GAAgE,IAIzDC,EAAMC,EAJSd,EAAyC,EAAzCA,QAASe,EAAgC,EAAhCA,mBAAoBd,EAAY,EAAZA,SACxDe,EAAQC,KAAKC,IAAL,MAAAD,KAAI,YAAQhB,EAASF,KAAI,SAACM,GAAD,OAAOA,EAAEhB,KAAK8B,eAC/CC,EAAUnB,EAASoB,MAAK,SAAChB,GAAD,OAAOA,EAAEhB,KAAK8B,YAAcH,KAK1D,OACI,yBAAKP,UAAU,cAAca,QAAS,kBAAMP,EAAmBf,KAC3D,kBAACM,EAAD,CAAQC,KAAMP,IACd,yBAAKS,UAAU,iBACX,yBAAKA,UAAU,sBACX,wBAAIA,UAAU,gBAAgBT,EAAQlB,MACtC,0BAAM2B,UAAU,aAAaW,EAAQ/B,KAAKkC,uBAE9C,yBAAKd,UAAU,YACX,yBAAKC,IAAKc,IAAab,IAAI,GAAGF,UAAU,eACxC,0BAAMA,UAAU,SAbdI,EAa+BO,EAAQhC,IAbjC0B,EAasC,GAZnDD,EAAKC,OAASA,EAAd,UAA0BD,EAAKY,UAAU,EAAGX,GAA5C,QAA4DD,OCN5D,SAAS3B,EAAT,GAA+B,IAAZwC,EAAW,EAAXA,QAC9B,OACI,yBAAKjB,UAAS,kBAAaiB,EAAQvC,WAAa,OAAS,aACpDuC,EAAQtC,IACT,yBAAKqB,UAAU,YACX,0BAAMA,UAAU,QAAQiB,EAAQrC,KAAKsC,kBACpCD,EAAQvC,YAAc,yBAAKuB,IAAKc,IAAab,IAAI,GAAGF,UAAU,iBCNhE,SAASmB,EAAT,GAAoC,IAAb3B,EAAY,EAAZA,SAC5B4B,EAASC,iBAAO,MAKtB,OAJAC,qBAAU,WACNF,EAAOG,QAAQC,mBAChB,CAAChC,IAGA,yBAAKQ,UAAU,SACVR,EACIiC,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAE9C,KAAK8B,UAAYiB,EAAE/C,KAAK8B,aACzCpB,KAAI,SAACM,GAAD,OACD,kBAAC,EAAD,CAASqB,QAASrB,EAAGgC,IAAKhC,EAAE1B,QAEpC,yBAAK2D,MAAO,CAAEC,MAAO,QAASC,MAAO,QAAUC,IAAKZ,K,uDCXjD,SAASa,EAAT,GAA6D,IAArChB,EAAoC,EAApCA,QAASiB,EAA2B,EAA3BA,WAAYC,EAAe,EAAfA,YAMxD,OACI,yBAAKnC,UAAU,kBACX,yBAAKA,UAAU,uBACX,yBAAKC,IAAKmC,IAAWlC,IAAI,MAG7B,yBAAKF,UAAU,cACX,2BACIqC,KAAK,OACLC,YAAY,iBACZC,MAAOtB,EACPuB,SAAU,SAACC,GAAD,OAAOP,EAAWO,EAAEC,OAAOH,QACrCI,UAjBhB,SAAuBF,GACL,UAAVA,EAAEb,KAAmBX,GACrBkB,QAmBA,yBAAKnC,UAAU,YAAYa,QAASsB,GAChC,yBAAKlC,IAAKgB,EAAU2B,IAAWC,IAAS3C,IAAI,OC1B7C,SAAS4C,EAAT,GAAwC,IAAtBC,EAAqB,EAArBA,OAAQC,EAAa,EAAbA,UACrC,OACI,yBAAKhD,UAAU,UACX,2BACIqC,KAAK,OACLC,YAAY,6BACZC,MAAOQ,EACPP,SAAU,SAACC,GAAD,OAAOO,EAAUP,EAAEC,OAAOH,W,qBCNrC,SAASU,IACpB,OACI,yBAAKjD,UAAU,WACX,yBAAKC,IAAKiD,IAAUhD,IAAI,KACxB,4CACC,iG,QCuEEiD,MAnEf,WAAgB,IAAD,EACaC,mBAAS/D,GADtB,mBACJgE,EADI,KACEC,EADF,OAEmCF,mBAAS,IAF5C,mBAEJG,EAFI,KAEajD,EAFb,OAGmC8C,mBAAS,IAH5C,mBAGJI,EAHI,KAGaC,EAHb,OAImBL,mBAAS,IAJ5B,mBAIJnC,EAJI,KAIKiB,EAJL,OAKiBkB,mBAAS,IAL1B,mBAKJL,EALI,KAKIC,EALJ,OAMmCI,mBAAS,IAN5C,mBAMJM,EANI,KAMcC,EANd,KAkCX,OA1BArC,qBAAU,WACN,IAAMsC,EAAcP,EAAKzC,MAAK,SAACiD,GAAD,OAAOA,EAAEtE,QAAQrB,KAAOqF,EAAgBrF,MACtEuF,EAAoBG,GAAeA,EAAYpE,UAAa,IAiBhE,SAAwB6D,EAAMN,GAC1B,IAAMe,EAAST,EAAK1D,QAAO,YAAkB,IAAfJ,EAAc,EAAdA,QAC1B,OAAQwD,GAAUxD,EAAQlB,KAAK0F,cAAcC,SAASjB,EAAOgB,kBAEjEJ,EAAkBG,GApBlBG,CAAeZ,EAAMN,KACtB,CAACQ,EAAiBF,EAAMN,IAuBvB,yBAAK/C,UAAU,OACX,+BACI,gCACI,kBAACH,EAAD,CAAQC,KAAMV,KAElB,kBAAC0D,EAAD,CAAQC,OAAQA,EAAQC,UAAWA,IACnC,yBAAKhD,UAAU,iBACV0D,EAAiBpE,KAAI,gBAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,SAAZ,OAClB,kBAACW,EAAD,CACIZ,QAASA,EACTqC,IAAKrC,EAAQrB,GACboC,mBAAoBA,EACpBd,SAAUA,SAKzB+D,EAAgBrF,GACb,8BACI,gCACI,kBAAC2B,EAAD,CAAQC,KAAMyD,EAAiBxD,UAAQ,KAE3C,kBAACoB,EAAD,CAAa3B,SAAUgE,IACvB,kBAACvB,EAAD,CAAchB,QAASA,EAASiB,WAAYA,EAAYC,YA5CxE,WACI,IAAM+B,EAAQb,EAAKc,WAAU,SAACN,GAAD,OAAOA,EAAEtE,QAAQrB,KAAOqF,EAAgBrF,MAC/DkG,EAAUC,OAAOC,OAAO,GAAIjB,EAAlBgB,OAAA,IAAAA,CAAA,GACXH,EAAQ,CACL3E,QAASgE,EACT/D,SAAS,GAAD,mBAAM6D,EAAKa,GAAO1E,UAAlB,CAA4B,IAAIf,GAAQ,EAAMwC,EAAS,IAAIsD,WAI3EjB,EAAQc,GACRlC,EAAW,QAqCH,kBAACe,EAAD,QC7DIuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMxE,a,mBEzI5B0E,EAAOC,QAAU,IAA0B,uC,mBCA3CD,EAAOC,QAAU,IAA0B,iC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,4C,6ECA3CD,EAAOC,QAAU,IAA0B,uC","file":"static/js/main.54ad0a35.chunk.js","sourcesContent":["const faker = require('faker')\n\nclass User {\n    constructor() {\n        this.id = faker.random.uuid()\n        this.name = faker.name.findName()\n        this.avatar = faker.internet.avatar()\n    }\n}\nexport class Message {\n    constructor(isMainUser, msg, date) {\n        this.id = faker.random.uuid()\n        this.msg = msg || faker.lorem.words(faker.helpers.randomize([...Array(20).keys()]))\n        this.isMainUser = isMainUser\n        this.date = date || faker.date.recent()\n    }\n}\n\nexport const mainUser = new User()\n\nexport const contacts = [...Array(11).keys()].map(() => new User())\n\nexport const contactsMessages = contacts.map((contact) => {\n    return {\n        contact,\n        messages: [...Array(50).keys()]\n            .map((_, i) => {\n                return (i + 1) % 2 === 0 ? new Message(true) : new Message(false)\n            })\n            .filter((m) => m.msg),\n    }\n})\n","import React from 'react'\n\nexport default function Avatar({ user, showName }) {\n    return (\n        <div className=\"avatar-component\">\n            <img className=\"avatar\" src={user.avatar} alt=\"\" />\n            {showName && <h3 className=\"avatar-title\">{user.name}</h3>}\n        </div>\n    )\n}\n","import React from 'react'\nimport doubleCheck from '../assets/done_all.svg'\nimport Avatar from './Avatar'\n\nexport default function ContactBox({ contact, setContactSelected, messages }) {\n    const maxTs = Math.max(...messages.map((m) => m.date.getTime()))\n    const lastMsg = messages.find((m) => m.date.getTime() === maxTs)\n\n    function truncate(text, length) {\n        return text.length > length ? `${text.substring(0, length)} ...` : text\n    }\n    return (\n        <div className=\"contact-box\" onClick={() => setContactSelected(contact)}>\n            <Avatar user={contact} />\n            <div className=\"right-section\">\n                <div className=\"contact-box-header\">\n                    <h3 className=\"avatar-title\">{contact.name}</h3>\n                    <span className=\"time-mark\">{lastMsg.date.toLocaleDateString()}</span>\n                </div>\n                <div className=\"last-msg\">\n                    <img src={doubleCheck} alt=\"\" className=\"icon-small\" />\n                    <span className=\"text\">{truncate(lastMsg.msg, 30)}</span>\n                </div>\n            </div>\n        </div>\n    )\n}\n","import React from 'react'\nimport doubleCheck from '../assets/done_all.svg'\n\nexport default function Message({ message }) {\n    return (\n        <div className={`message ${message.isMainUser ? 'sent' : 'received'}`}>\n            {message.msg}\n            <div className=\"metadata\">\n                <span className=\"date\">{message.date.toLocaleString()}</span>\n                {message.isMainUser && <img src={doubleCheck} alt=\"\" className=\"icon-small\" />}\n            </div>\n        </div>\n    )\n}\n","import React, { useRef, useEffect } from 'react'\nimport Message from './Message'\n\nexport default function MessagesBox({ messages }) {\n    const endDiv = useRef(null)\n    useEffect(() => {\n        endDiv.current.scrollIntoView()\n    }, [messages])\n\n    return (\n        <div className=\"chats\">\n            {messages\n                .sort((a, b) => a.date.getTime() - b.date.getTime())\n                .map((m) => (\n                    <Message message={m} key={m.id} />\n                ))}\n            <div style={{ float: 'right', clear: 'both' }} ref={endDiv}></div>\n        </div>\n    )\n}\n","import React from 'react'\nimport emojiIcon from '../assets/tag_faces.svg'\nimport micIcon from '../assets/mic.svg'\nimport sendIcon from '../assets/send.svg'\n\nexport default function ChatInputBox({ message, setMessage, pushMessage }) {\n    function handleKeyDown(e) {\n        if (e.key === 'Enter' && message) {\n            pushMessage()\n        }\n    }\n    return (\n        <div className=\"chat-input-box\">\n            <div className=\"icon emoji-selector\">\n                <img src={emojiIcon} alt=\"\" />\n            </div>\n\n            <div className=\"chat-input\">\n                <input\n                    type=\"text\"\n                    placeholder=\"Type a message\"\n                    value={message}\n                    onChange={(e) => setMessage(e.target.value)}\n                    onKeyDown={handleKeyDown}\n                />\n            </div>\n\n            <div className=\"icon send\" onClick={pushMessage}>\n                <img src={message ? sendIcon : micIcon} alt=\"\" />\n            </div>\n        </div>\n    )\n}\n","import React from 'react'\n\nexport default function Search({ search, setSearch }) {\n    return (\n        <div className=\"search\">\n            <input\n                type=\"text\"\n                placeholder=\"Search or start a new chat\"\n                value={search}\n                onChange={(e) => setSearch(e.target.value)}\n            />\n        </div>\n    )\n}\n","import React from 'react'\nimport introImg from '../assets/intro-whatsapp.jpg'\n\nexport default function Welcome() {\n    return (\n        <div className=\"welcome\">\n            <img src={introImg} alt=\"\" />\n            <h1> HELLO TITU.</h1>\n             <h4>   Some people go to priests; others to poetry; I to my friends.</h4>\n        </div>\n    )\n}\n","import React, { useState, useEffect } from 'react'\n\nimport { mainUser, contactsMessages, Message } from './generateFakeData'\nimport Avatar from './components/Avatar'\nimport ContactBox from './components/ContactBox'\nimport MessagesBox from './components/MessagesBox'\nimport ChatInputBox from './components/ChatInputBox'\nimport Search from './components/Search'\nimport Welcome from './components/Welcome'\n\nimport './App.css'\n\nfunction App() {\n    const [data, setData] = useState(contactsMessages)\n    const [contactSelected, setContactSelected] = useState({})\n    const [currentMessages, setCurrentMessages] = useState([])\n    const [message, setMessage] = useState('')\n    const [search, setSearch] = useState('')\n    const [filteredContacts, setFilterContacts] = useState([])\n\n    useEffect(() => {\n        const currContact = data.find((d) => d.contact.id === contactSelected.id)\n        setCurrentMessages((currContact && currContact.messages) || [])\n        filterContacts(data, search)\n    }, [contactSelected, data, search])\n\n    function pushMessage() {\n        const index = data.findIndex((d) => d.contact.id === contactSelected.id)\n        const newData = Object.assign([], data, {\n            [index]: {\n                contact: contactSelected,\n                messages: [...data[index].messages, new Message(true, message, new Date())],\n            },\n        })\n\n        setData(newData)\n        setMessage('')\n    }\n\n    function filterContacts(data, search) {\n        const result = data.filter(({ contact }) => {\n            return !search || contact.name.toLowerCase().includes(search.toLowerCase())\n        })\n        setFilterContacts(result)\n    }\n\n    return (\n        <div className=\"app\">\n            <aside>\n                <header>\n                    <Avatar user={mainUser} />\n                </header>\n                <Search search={search} setSearch={setSearch} />\n                <div className=\"contact-boxes\">\n                    {filteredContacts.map(({ contact, messages }) => (\n                        <ContactBox\n                            contact={contact}\n                            key={contact.id}\n                            setContactSelected={setContactSelected}\n                            messages={messages}\n                        />\n                    ))}\n                </div>\n            </aside>\n            {contactSelected.id ? (\n                <main>\n                    <header>\n                        <Avatar user={contactSelected} showName />\n                    </header>\n                    <MessagesBox messages={currentMessages} />\n                    <ChatInputBox message={message} setMessage={setMessage} pushMessage={pushMessage} />\n                </main>\n            ) : (\n                <Welcome />\n            )}\n        </div>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/tag_faces.c50cc449.svg\";","module.exports = __webpack_public_path__ + \"static/media/mic.958bf042.svg\";","module.exports = __webpack_public_path__ + \"static/media/send.282ecb9e.svg\";","module.exports = __webpack_public_path__ + \"static/media/intro-whatsapp.282a36f5.jpg\";","module.exports = __webpack_public_path__ + \"static/media/done_all.211c1153.svg\";"],"sourceRoot":""}